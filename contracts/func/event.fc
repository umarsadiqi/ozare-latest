{-
    storage#_ uid:uint128 oracle:MsgAddressInt amountA:uint256 amountB:uint256 started:Bool finished:Bool winner:Bool bet_code:^Cell = Storage;
-}

const int TONS_FOR_FEES = 100000000;
const int TONS_FOR_BET_DEPLOY = 100000000;

(int, slice, int, int, int, int, int, cell) load_data () inline {
    slice ds = get_data().begin_parse();
    return (ds~load_uint(128), ds~load_msg_addr(), ds~load_uint(256), ds~load_uint(256), ds~load_uint(1), ds~load_uint(1), ds~load_uint(1), ds~load_ref());
}

() save_data (int uid, slice oracle, int amountA, int amountB, int started, int finished, int winner, cell bet_code) impure {
    set_data(begin_cell()
        .store_uint(uid, 128)
        .store_slice(oracle)
        .store_uint(amountA, 256)
        .store_uint(amountB, 256)
        .store_uint(started, 1)
        .store_uint(finished, 1)
        .store_uint(winner, 1)
        .store_ref(bet_code)
    .end_cell());
}

cell get_bet_code () inline {
    return get_data().begin_parse().preload_ref();
}

cell form_bet_state_init (slice owner, int outcome) inline {
    return begin_cell()
        .store_uint(6, 5)
        .store_ref(get_bet_code())
        .store_ref(begin_cell()
            .store_slice(owner)
            .store_slice(my_address())
            .store_uint(outcome, 1)
            .store_uint(0, 256)
        .end_cell())
    .end_cell();
}

slice get_contract_address (cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(0, 8)
        .store_uint(cell_hash(state_init), 256)
    .end_cell().begin_parse();
}

int calc_house_edge (int total) inline {
    if (total < 100000000000) {
        return (total * 5) / 100;
    }
    return (total * 10) / 100;
}

() recv_internal (int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if ((flags & 1) | (in_msg_body.slice_empty?())) { ;; ignore bounced messages and empty messages
        return ();
    }

    slice sender = cs~load_msg_addr();
    (int uid, slice oracle, int amountA, int amountB, int started, int finished, int winner, cell bet_code) = load_data();

    int op = in_msg_body~load_uint(32);

    if (op == op::bet) {
        int outcome = in_msg_body~load_uint(1);
        int amount = in_msg_body~load_uint(256);
        throw_unless(703, msg_value - TONS_FOR_FEES - TONS_FOR_BET_DEPLOY >= amount);
        throw_if(704, started == 1);

        cell state_init = form_bet_state_init(sender, outcome);
        
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(get_contract_address(state_init))
            .store_coins(TONS_FOR_BET_DEPLOY)
            .store_uint(6, 1 + 4 + 4 + 64 + 32 + 3)
            .store_ref(state_init)
            .store_uint(op::deposit, 32)
            .store_uint(amount, 256)
        .end_cell(), 0);
        
        if (outcome == 0) {
            amountA += amount;
        } else {
            amountB += amount;
        }

        ;; cash back
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender)
            .store_coins(msg_value - TONS_FOR_FEES - TONS_FOR_BET_DEPLOY - amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell(), 0);
    }
    
    elseif (op == op::process_bet) {
        slice player = in_msg_body~load_msg_addr();
        int outcome = in_msg_body~load_uint(1);
        int amount = in_msg_body~load_uint(256);
        
        cell state_init = form_bet_state_init(player, outcome);
        throw_unless(706, equal_slice_bits(sender, get_contract_address(state_init)));
        throw_unless(704, finished == 1);

        int prize = 0;

        if (outcome == winner) {
            ;; player won
            prize = (amountA + amountB - calc_house_edge(amountA + amountB)) * amount;
            if (winner == 0) {
                prize /= amountA;
            } else {
                prize /= amountB;
            }
        }

        ;; send winnings and cashback
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(player)
            .store_coins(prize)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell(), 64);
    }

    elseif (op == op::start_event) {
        throw_unless(701, equal_slice_bits(sender, oracle));

        started = 1;

        ;; house edge payout
        int house_edge = calc_house_edge(amountA + amountB);
        if (house_edge > 0) {
            send_raw_message(begin_cell()
                .store_uint(0x18, 6)
                .store_slice(oracle)
                .store_coins(calc_house_edge(amountA + amountB))
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_slice("House edge")
            .end_cell(), 1);
        }

        ;; cashback
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell(), 64);
    }

    elseif (op == op::finish_event) {
        throw_unless(701, equal_slice_bits(sender, oracle));

        finished = 1;
        winner = in_msg_body~load_uint(1);

        ;; cashback
        send_raw_message(begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell(), 64);
    }

    save_data(uid, oracle, amountA, amountB, started, finished, winner, bet_code);
}

(int, int) get_total_bets () method_id {
    (_, _, int amountA, int amountB, _, _, _, _) = load_data();
    return (amountA, amountB);
}

(int, int) get_started_finished () method_id {
    (_, _, _, _, int started, int finished, _, _) = load_data();
    return (started, finished);
}

int get_winner () method_id {
    (_, _, _, _, _, _, int winner, _) = load_data();
    return winner;
}
